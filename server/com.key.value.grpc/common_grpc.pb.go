// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: common.proto

package com_key_value_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyValueServiceClient is the client API for KeyValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueServiceClient interface {
	CreateDatabase(ctx context.Context, in *CreateDatabase, opts ...grpc.CallOption) (*SuccessDetail, error)
	CreateTable(ctx context.Context, in *CreateTable, opts ...grpc.CallOption) (*SuccessDetail, error)
	SetOrUpdateKey(ctx context.Context, in *SetOrUpdateKey, opts ...grpc.CallOption) (*SuccessDetail, error)
	GetKey(ctx context.Context, in *GetOrDeleteKey, opts ...grpc.CallOption) (*SuccessDetail, error)
	DeleteKey(ctx context.Context, in *GetOrDeleteKey, opts ...grpc.CallOption) (*SuccessDetail, error)
}

type keyValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueServiceClient(cc grpc.ClientConnInterface) KeyValueServiceClient {
	return &keyValueServiceClient{cc}
}

func (c *keyValueServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabase, opts ...grpc.CallOption) (*SuccessDetail, error) {
	out := new(SuccessDetail)
	err := c.cc.Invoke(ctx, "/KeyValueService/createDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) CreateTable(ctx context.Context, in *CreateTable, opts ...grpc.CallOption) (*SuccessDetail, error) {
	out := new(SuccessDetail)
	err := c.cc.Invoke(ctx, "/KeyValueService/createTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) SetOrUpdateKey(ctx context.Context, in *SetOrUpdateKey, opts ...grpc.CallOption) (*SuccessDetail, error) {
	out := new(SuccessDetail)
	err := c.cc.Invoke(ctx, "/KeyValueService/setOrUpdateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) GetKey(ctx context.Context, in *GetOrDeleteKey, opts ...grpc.CallOption) (*SuccessDetail, error) {
	out := new(SuccessDetail)
	err := c.cc.Invoke(ctx, "/KeyValueService/getKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) DeleteKey(ctx context.Context, in *GetOrDeleteKey, opts ...grpc.CallOption) (*SuccessDetail, error) {
	out := new(SuccessDetail)
	err := c.cc.Invoke(ctx, "/KeyValueService/deleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueServiceServer is the server API for KeyValueService service.
// All implementations should embed UnimplementedKeyValueServiceServer
// for forward compatibility
type KeyValueServiceServer interface {
	CreateDatabase(context.Context, *CreateDatabase) (*SuccessDetail, error)
	CreateTable(context.Context, *CreateTable) (*SuccessDetail, error)
	SetOrUpdateKey(context.Context, *SetOrUpdateKey) (*SuccessDetail, error)
	GetKey(context.Context, *GetOrDeleteKey) (*SuccessDetail, error)
	DeleteKey(context.Context, *GetOrDeleteKey) (*SuccessDetail, error)
}

// UnimplementedKeyValueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKeyValueServiceServer struct {
}

func (UnimplementedKeyValueServiceServer) CreateDatabase(context.Context, *CreateDatabase) (*SuccessDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedKeyValueServiceServer) CreateTable(context.Context, *CreateTable) (*SuccessDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedKeyValueServiceServer) SetOrUpdateKey(context.Context, *SetOrUpdateKey) (*SuccessDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrUpdateKey not implemented")
}
func (UnimplementedKeyValueServiceServer) GetKey(context.Context, *GetOrDeleteKey) (*SuccessDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeyValueServiceServer) DeleteKey(context.Context, *GetOrDeleteKey) (*SuccessDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}

// UnsafeKeyValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueServiceServer will
// result in compilation errors.
type UnsafeKeyValueServiceServer interface {
	mustEmbedUnimplementedKeyValueServiceServer()
}

func RegisterKeyValueServiceServer(s grpc.ServiceRegistrar, srv KeyValueServiceServer) {
	s.RegisterService(&KeyValueService_ServiceDesc, srv)
}

func _KeyValueService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyValueService/createDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).CreateDatabase(ctx, req.(*CreateDatabase))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyValueService/createTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).CreateTable(ctx, req.(*CreateTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_SetOrUpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrUpdateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).SetOrUpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyValueService/setOrUpdateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).SetOrUpdateKey(ctx, req.(*SetOrUpdateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrDeleteKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyValueService/getKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).GetKey(ctx, req.(*GetOrDeleteKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrDeleteKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyValueService/deleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).DeleteKey(ctx, req.(*GetOrDeleteKey))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueService_ServiceDesc is the grpc.ServiceDesc for KeyValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeyValueService",
	HandlerType: (*KeyValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDatabase",
			Handler:    _KeyValueService_CreateDatabase_Handler,
		},
		{
			MethodName: "createTable",
			Handler:    _KeyValueService_CreateTable_Handler,
		},
		{
			MethodName: "setOrUpdateKey",
			Handler:    _KeyValueService_SetOrUpdateKey_Handler,
		},
		{
			MethodName: "getKey",
			Handler:    _KeyValueService_GetKey_Handler,
		},
		{
			MethodName: "deleteKey",
			Handler:    _KeyValueService_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
